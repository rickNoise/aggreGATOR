// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO
    feed_follows (
        id,
        created_at,
        updated_at,
        user_id,
        feed_id
    )
VALUES ($1, $2, $3, $4, $5) RETURNING feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id,
    (
        SELECT users.name
        FROM users
        WHERE
            users.id = feed_follows.user_id
    ) AS user_name,
    (
        SELECT feeds.name
        FROM feeds
        WHERE
            feeds.id = feed_follows.feed_id
    ) AS feed_name
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowByUserAndFeedUrl = `-- name: DeleteFeedFollowByUserAndFeedUrl :one
DELETE FROM feed_follows
WHERE
    user_id = (
        SELECT user_id
        FROM users
        WHERE
            users.name = $1
    )
    AND feed_id = (
        SELECT feed_id
        FROM feeds
        WHERE
            feeds.url = $2
    ) RETURNING id, created_at, updated_at, user_id, feed_id
`

type DeleteFeedFollowByUserAndFeedUrlParams struct {
	UserName string
	FeedUrl  string
}

// Delete a feed follow record by user and feed url combination.
func (q *Queries) DeleteFeedFollowByUserAndFeedUrl(ctx context.Context, arg DeleteFeedFollowByUserAndFeedUrlParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollowByUserAndFeedUrl, arg.UserName, arg.FeedUrl)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    ff.id,
    ff.created_at,
    ff.updated_at,
    ff.user_id,
    ff.feed_id,
    f.name AS feed_name,
    u.name AS user_name
FROM
    feed_follows ff
    INNER JOIN users u ON ff.user_id = u.id
    INNER JOIN feeds f ON ff.feed_id = f.id
WHERE
    u.name = $1
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

// Add a GetFeedFollowsForUser query. It should return all the feed follows for a given user, and include the names of the feeds and user in the result.
func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
